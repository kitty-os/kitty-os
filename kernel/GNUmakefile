# Nuke built-in rules and variables.
override MAKEFLAGS += -rR

# This is the name that our final kernel executable will have.
# Change as needed.
override KERNEL := kernel

# Convenience macro to reliably declare user overridable variables.
define DEFAULT_VAR =
    ifeq ($(origin $1),default)
        override $(1) := $(2)
    endif
    ifeq ($(origin $1),undefined)
        override $(1) := $(2)
    endif
endef

# It is suggested to use a custom built cross toolchain to build a kernel.
# We are using the standard "c++" here, it may work by using
# the host system's toolchain, but this is not guaranteed.
override DEFAULT_KCXX := clang++
$(eval $(call DEFAULT_VAR,KCXX,$(DEFAULT_KCXX)))

# Same thing for "cc" (the C compiler).
override DEFAULT_KCC := clang
$(eval $(call DEFAULT_VAR,KCC,$(DEFAULT_KCC)))

# Same thing for "ld" (the linker).
override DEFAULT_KLD := ld
$(eval $(call DEFAULT_VAR,KLD,$(DEFAULT_KLD)))

# User controllable C++ flags.
override DEFAULT_KCXXFLAGS := -g -O2 -pipe
$(eval $(call DEFAULT_VAR,KCXXFLAGS,$(DEFAULT_KCXXFLAGS)))

# User controllable C flags.
override DEFAULT_KCFLAGS := -g -O2 -pipe
$(eval $(call DEFAULT_VAR,KCFLAGS,$(DEFAULT_KCFLAGS)))

# User controllable C/C++ preprocessor flags. We set none by default.
override DEFAULT_KCPPFLAGS :=
$(eval $(call DEFAULT_VAR,KCPPFLAGS,$(DEFAULT_KCPPFLAGS)))

# User controllable nasm flags.
override DEFAULT_KNASMFLAGS := -F dwarf -g
$(eval $(call DEFAULT_VAR,KNASMFLAGS,$(DEFAULT_KNASMFLAGS)))

# User controllable linker flags. We set none by default.
override DEFAULT_KLDFLAGS :=
$(eval $(call DEFAULT_VAR,KLDFLAGS,$(DEFAULT_KLDFLAGS)))

# Internal flags shared by both C and C++ compilers.
override SHARED_FLAGS := \
    -Wall \
    -Wextra \
	-Wno-unused-parameter \
	-Wno-unused-variable \
	-pedantic \
    -Wshadow \
    -Wnull-dereference \
    -Wformat \
    -Wformat-security \
    -Wno-c99-extensions \
    -O3 \
    -ffreestanding \
    -fstack-protector \
	-fstack-protector-strong \
	-fstack-protector-all \
    -fstack-check \
    -fno-lto \
    -fPIE \
    -m64 \
	-march=x86-64 \
	-mno-avx \
	-msse \
	-msse2 \
    -g \
    -mno-red-zone \
    -Wimplicit-function-declaration \
    -Wpointer-arith \
    -Wbad-function-cast \
    -Wno-trigraphs \

# Internal C++ flags that should not be changed by the user.
override KCXXFLAGS += \
    -std=c++23 \
    -fno-rtti \
    -fno-exceptions \
    -Wmissing-declarations \
    -Weffc++ \
    -Woverloaded-virtual \
    -Wnon-virtual-dtor \
    $(SHARED_FLAGS)

# Internal C flags that should not be changed by the user.
override KCFLAGS += \
    -std=gnu11 \
    -Wstrict-prototypes \
    $(SHARED_FLAGS)

# Internal C/C++ preprocessor flags that should not be changed by the user.
override KCPPFLAGS := \
    -I src \
    -I include \
    -I include/xed/ \
    -I include/stb/ \
	-I include/uacpi/ \
    $(KCPPFLAGS) \
    -MMD \
    -MP \

# Internal linker flags that should not be changed by the user.
override KLDFLAGS += \
    -m elf_x86_64 \
    -nostdlib \
    -pie \
    -z text \
    -z max-page-size=0x1000 \
    -T linker.ld \
    -Lxed \
    -lxed \
    -lxed-ild \

# Internal nasm flags that should not be changed by the user.
override KNASMFLAGS += \
    -Wall \
    -f elf64 \
    -I src/Hal/Int/ \

# Use "find" to glob all *.cpp, *.c, *.S, and *.asm files in the tree and obtain the
# object and header dependency file names.
override CXXFILES := $(shell cd src && find -L * -type f -name '*.cpp')
override CFILES := $(shell cd src && find -L * -type f -name '*.c')
override ASFILES := $(shell cd src && find -L * -type f -name '*.S')
override NASMFILES := $(shell cd src && find -L * -type f -name '*.asm')
override OBJ := $(addprefix obj/,$(CXXFILES:.cpp=.cpp.o) $(CFILES:.c=.c.o) $(ASFILES:.S=.S.o) $(NASMFILES:.asm=.asm.o))
override HEADER_DEPS := $(addprefix obj/,$(CXXFILES:.cpp=.cpp.d) $(CFILES:.c=.c.d) $(ASFILES:.S=.S.d))

# Default target.
.PHONY: all
all: bin/$(KERNEL)

src/limine.h:
	curl -Lo $@ https://github.com/limine-bootloader/limine/raw/trunk/limine.h

src/Hal/Int/table.cpp:
	python3 src/Hal/Int/create_table.py

# Link rules for the final kernel executable.
# The magic printf/dd command is used to force the final ELF file type to ET_DYN.
# GNU binutils, for silly reasons, forces the ELF type to ET_EXEC even for
# relocatable PIEs, if the base load address is non-0.
# See https://sourceware.org/bugzilla/show_bug.cgi?id=31795 for more information.
bin/$(KERNEL): GNUmakefile linker.ld $(OBJ)
	mkdir -p "$$(dirname $@)"
	$(KLD) $(OBJ) $(KLDFLAGS) -o $@
	printf '\003' | dd of=$@ bs=1 count=1 seek=16 conv=notrunc 2>/dev/null

# Include header dependencies.
-include $(HEADER_DEPS)

# Compilation rules for *.cpp files.
obj/%.cpp.o: src/%.cpp GNUmakefile src/limine.h
	mkdir -p "$$(dirname $@)"
	$(KCXX) $(KCXXFLAGS) $(KCPPFLAGS) -c $< -o $@

# Compilation rules for *.c files.
obj/%.c.o: src/%.c GNUmakefile src/limine.h
	mkdir -p "$$(dirname $@)"
	$(KCC) $(KCFLAGS) $(KCPPFLAGS) -c $< -o $@

# Compilation rules for *.S files.
obj/%.S.o: src/%.S GNUmakefile
	mkdir -p "$$(dirname $@)"
	$(KCC) $(KCFLAGS) $(KCPPFLAGS) -c $< -o $@

# Compilation rules for *.asm (nasm) files.
obj/%.asm.o: src/%.asm GNUmakefile
	mkdir -p "$$(dirname $@)"
	nasm $(KNASMFLAGS) $< -o $@

# Remove object files and the final executable.
.PHONY: clean
clean:
	rm -rf bin obj

.PHONY: distclean
distclean: clean
	rm -f src/limine.h